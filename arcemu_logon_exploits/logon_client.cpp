#include "stdafx.h"
#include "logon_client.h"
#include <iostream>
#include <string>
#include <WS2tcpip.h>
#include "circular_buffer.h"

#pragma comment (lib, "ws2_32.lib")

void logon_client::sendToServer(char(&in)[4096], char(&out)[4096])
{
	std::string ip = "127.0.0.1";		//IP of arcemy server
	int port = 3724;					//Port arcemu

	WSAData data;
	WORD ver = MAKEWORD(2, 2);

	int wsResult = WSAStartup(ver, &data);
	
	if (wsResult != 0) 
	{
		std::cerr << "can't start winsock" << std::endl;
		return;
	}

	SOCKET sock = socket(AF_INET, SOCK_STREAM, 0);

	if (sock == INVALID_SOCKET)
	{
		std::cerr << "can't create socket" << std::endl;
		WSACleanup();
		return;
	}

	//Bind ip and port to socket
	sockaddr_in hint;
	hint.sin_family = AF_INET;
	hint.sin_port = htons(port);
	inet_pton(AF_INET, ip.c_str(), &hint.sin_addr);

	int con_res = connect(sock, (sockaddr*)&hint, sizeof(hint));

	if (con_res == SOCKET_ERROR)
	{
		std::cerr << "can't connect to socket" << std::endl;
		closesocket(sock);
		WSACleanup();
		return;
	}

	char buf[4096];

	while (true) {

		std::cout << "Command name: " << sizeof(in) << std::endl;

		int sendRes = send(sock, in, sizeof(in), 0);

		if (sendRes != SOCKET_ERROR) {

			std::cout << "Sent packet to server" << std::endl;

			ZeroMemory(buf, 4096);
			int bytesReceived = recv(sock, buf, 4096, 0);

			if (bytesReceived > 0) {
				std::cout << "Receiving packet from server" << std::endl;
				memcpy(out, buf, sizeof(out));

				break;
			}
		}
	}

	closesocket(sock);
	WSACleanup();
}