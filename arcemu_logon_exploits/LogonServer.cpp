#include "stdafx.h"
#include "LogonServer.h"

#define SERVER_PORT 3000

#pragma comment (lib, "ws2_32.lib")

SOCKET client_socket;

enum _errors
{
	CE_SUCCESS = 0x00,
	CE_IPBAN = 0x01,									 //2bd -- unable to connect (some internal problem)
	CE_ACCOUNT_CLOSED = 0x03,							 // "This account has been closed and is no longer in service -- Please check the registered email address of this account for further information.";
	CE_NO_ACCOUNT = 0x04,								 //(5)The information you have entered is not valid.  Please check the spelling of the account name and password.  If you need help in retrieving a lost or stolen password and account
	CE_ACCOUNT_IN_USE = 0x06,							 //This account is already logged in.  Please check the spelling and try again.
	CE_PREORDER_TIME_LIMIT = 0x07,
	CE_SERVER_FULL = 0x08,								//Could not log in at this time.  Please try again later.
	CE_WRONG_BUILD_NUMBER = 0x09,						 //Unable to validate game version.  This may be caused by file corruption or the interference of another program.
	CE_UPDATE_CLIENT = 0x0a,
	CE_ACCOUNT_FREEZED = 0x0c
};

typedef struct AUTH_LOGON_CHALLENGE
{
	uint8   cmd;
	uint8   error;		  // 0x00
	uint16  size;		   // 0x0026
	uint8   gamename[4];	// 'WoW'
	uint8   version1;	   // 0x00
	uint8   version2;	   // 0x08 (0.8.0)
	uint8   version3;	   // 0x00
	uint8		build;		  // 3734
	uint8   platform[4];	// 'x86'
	uint8   os[4];		  // 'Win'
	uint8   country[4];	 // 'enUS'
	uint32  timezone_bias;  // -419
	uint32  ip;			 // client ip
	uint8   I_len;		  // length of account name
	uint8   I[50];		   // account name
} sAuthLogonChallenge;

typedef struct REALMS
{
	uint8		param1;			// 0x10
	uint16		param2;			// 0x00
	uint32		param3;		   // 0x00
	uint16		size;
	uint8		icon;
	uint8		lock;
	uint8		flags;
	std::string	name;	   
	std::string	ip;		 
	float		pop;	
	uint8		param4;		  	
	uint8		time;
	uint8		id;
	uint8		param5;			// 0x17
	uint8		param6;			// 0x00
} sRealms;

void LogonServer::Start()
{
	WSADATA wsData;
	WORD ver = MAKEWORD(2, 2);

	int wsOk = WSAStartup(ver, &wsData);

	if (wsOk != 0) 
	{
		std::cerr << "Can't init winsock" << std::endl;
		return;
	}

	SOCKET listening = socket(AF_INET, SOCK_STREAM, 0);
	if (listening == INVALID_SOCKET) 
	{
		std::cerr << "Can't create socket" << std::endl;
		return;
	}

	//Bind ip and port to socket
	sockaddr_in hint;
	hint.sin_family = AF_INET;
	hint.sin_port = htons(SERVER_PORT);
	hint.sin_addr.S_un.S_addr = INADDR_ANY;

	bind(listening, (sockaddr*)&hint, sizeof(hint));

	std::cout << "Listening on port: " << SERVER_PORT << std::endl;
	//Tell winsock to listen to the socket
	listen(listening, SOMAXCONN);

	//Client
	sockaddr_in client;
	int client_size = sizeof(client);

	client_socket = accept(listening, (sockaddr*)&client, &client_size);
	if (client_socket == INVALID_SOCKET) 
	{
		std::cerr << "Can't create socket" << std::endl;
		return;
	}

	char host[NI_MAXHOST]; //Remotename from client
	char service[NI_MAXHOST]; //Port the client is connected to

	ZeroMemory(host, NI_MAXHOST);
	ZeroMemory(service, NI_MAXSERV);

	if (getnameinfo((sockaddr*)&client, sizeof(client), host, NI_MAXHOST, service, NI_MAXSERV, 0) == 0)
	{
		std::cout << host << "connected on port " << service << std::endl;
	}
	else
	{
		inet_ntop(AF_INET, &client.sin_addr, host, NI_MAXHOST);
		std::cout << host << " connected on port " << ntohs(client.sin_port) << std::endl;
	}

	closesocket(listening);

	//Init client connection to arcemu logon server
	LogonClient logClient;

	char buf[BUFFER_SIZE];

	while (true)
	{
		ZeroMemory(buf, BUFFER_SIZE);

		int bytes_received = recv(client_socket, buf, BUFFER_SIZE, 0);

		std::cout << "recived bytes from client: " << bytes_received << std::endl;

		if (bytes_received == SOCKET_ERROR)
		{
			std::cerr << "Error in recive" << std::endl;
			break;
		}

		if (bytes_received < 1)
		{
			std::cout << "Client disconnected" << std::endl;
			break;
		}

		else
		{
			char reply[BUFFER_SIZE];

			if (bytes_received == 39)
			{
				//printAccount(buf, bytes_received);
			}

			int bytes_out = logClient.SendToServer(buf, reply, bytes_received);

			char* rep = new char[bytes_out];
			memcpy(rep, reply, bytes_out);

			if (bytes_out == 43)
			{
				//we want to change this realm adress (127.0.0.1:8129) to (127.0.0.1:8130)
				//if we do this we can get a connection to the world server and start to modify packets
				//printRealm(rep, bytes_out);

			}

			send(client_socket, rep, bytes_out, 0);
			delete[] rep;

			std::cout << "Sending logon packet back to wow client" << std::endl;
			std::cout << "Reply packet size: " << bytes_out << std::endl;
		}

	}

	//Close connection to the arcemu logon server
	logClient.Close();

	//Close socket
	closesocket(client_socket);

	//Cleaup winsock
	WSACleanup();

	std::cout << "Logon complete, quitting" << std::endl;
}

void LogonServer::PrintRealm(char* buffer, int bytes)
{
	sRealms m_realm;

	memcpy(&m_realm, buffer, bytes);

	std::cout << "Realm ip adress: " << m_realm.ip << std::endl;
}

void LogonServer::PrintAccount(char* buffer, int bytes)
{
	sAuthLogonChallenge m_challenge;

	memcpy(&m_challenge, buffer, bytes);

	std::string name;

	for (int i = 0; i < sizeof(m_challenge.I); i++) 
	{

		char tmp = (char)m_challenge.I[i];

		if (Isalpha(tmp)) {
			name += tmp;
		}
	}

	std::cout << "Acount name: " << name << std::endl;
}

void LogonServer::SpoofAuth(char* buffer, int bytes)
{
	sAuthLogonChallenge m_challenge;
	memcpy(&m_challenge, buffer, bytes);

	//This changes the operation from normal atuh to reconnect auth
	m_challenge.cmd = 0x2;
	memcpy(buffer, &m_challenge, bytes);
}

bool LogonServer::Isalpha(char c) {
	std::locale locale; // Default locale.
	return std::use_facet<std::ctype<char> >(locale).is(std::ctype<char>::alpha, c);
}

void LogonServer::SaveSession(char* buffer, int bytes)
{
	std::ofstream out("C:/Users/conta/Documents/Arcemu/files/session.txt");
	if (!out)
	{
		std::cout << "Cannot open output file\n";
		return;
	}
	out.write((char *)buffer, bytes);
	out.close();
}

void LogonServer::ReadSession(char* buffer, int bytes)
{
	std::ifstream in("C:/Users/conta/Documents/Arcemu/files/session.txt");
	if (!in)
	{
		std::cout << "Cannot open input file" << std::endl;
		return;
	}

	in.read((char *)&buffer, sizeof(bytes));
	in.close();
}

void LogonServer::ReadStaticSession(char* buffer)
{
	char arr[32] = { 01, 00, 97, 0xac, 0x9b, 0x92, 0x5e, 0x73, 0xca, 0x6c, 0xf7, 0x00, 0x8a, 0x4a, 0x2d, 0x98,
		0xe0, 0x19, 0xfa, 0xe0, 0x11, 0xa0 ,0x01, 0x00 , 0x00, 0x00 , 0x00, 0x00 , 0x00, 0x00 ,0x00, 0x00};

	memcpy(buffer, arr, 32);
}