#include "stdafx.h"
#include "sha_generator.h"
#include "common.h"
#include <vector>

sha_generator::sha_generator()
{
}


sha_generator::~sha_generator()
{
}
/*
Sha1Hash sha_generator::getHash() {
	
	BigNumber A = 0;
	BigNumber M = 0;
	BigNumber sessionkey = 0;
	

	//int A = 0;
//	BigNumber M = 0;
//	BigNumber sessionkey = 0;

	Sha1Hash sha;
	sha.Initialize();
	sha.Finalize();

	return sha;
}*/
/*
void UpdateSRP()
{
	const crypto::SRP6a srp6(g, N, true, s, B);

	std::vector<std::uint8_t> A;
	srp6.GetA(A);
//	memcpy(sessionA, &A[0], A.size());

	std::vector<std::uint8_t> K;
//	srp6.GetK(K);
	std::reverse(K.begin(), K.end());
//	memcpy(sessionKey, &K[0], K.size());

//	auto const sessionM = srp6Client + sOffsets().GetStatic(Offset::SRP6M);
	std::vector<std::uint8_t> M;
//	srp6.GetM(username, M);
	//memcpy(sessionM, &M[0], M.size());
}*/