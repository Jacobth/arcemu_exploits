#include "stdafx.h"
#include <iostream>
#include <string>
#include <WS2tcpip.h>
#include "circular_buffer.h"
#include "logon_client.h"

#pragma comment (lib, "ws2_32.lib")

UINT8 getCommand();

//UINT8 sendChallengeError(UINT8 Error);
enum _errors
{
	CE_SUCCESS = 0x00,
	CE_IPBAN = 0x01,									 //2bd -- unable to connect (some internal problem)
	CE_ACCOUNT_CLOSED = 0x03,							 // "This account has been closed and is no longer in service -- Please check the registered email address of this account for further information.";
	CE_NO_ACCOUNT = 0x04,								 //(5)The information you have entered is not valid.  Please check the spelling of the account name and password.  If you need help in retrieving a lost or stolen password and account
	CE_ACCOUNT_IN_USE = 0x06,							 //This account is already logged in.  Please check the spelling and try again.
	CE_PREORDER_TIME_LIMIT = 0x07,
	CE_SERVER_FULL = 0x08,								//Could not log in at this time.  Please try again later.
	CE_WRONG_BUILD_NUMBER = 0x09,						 //Unable to validate game version.  This may be caused by file corruption or the interference of another program.
	CE_UPDATE_CLIENT = 0x0a,
	CE_ACCOUNT_FREEZED = 0x0c
};

typedef struct
{
	UINT8   cmd;
	UINT8   error;		  // 0x00
	UINT16  size;		   // 0x0026
	UINT8   gamename[4];	// 'WoW'
	UINT8   version1;	   // 0x00
	UINT8   version2;	   // 0x08 (0.8.0)
	UINT8   version3;	   // 0x00
	UINT8  build;		  // 3734
	UINT8   platform[4];	// 'x86'
	UINT8   os[4];		  // 'Win'
	UINT8   country[4];	 // 'enUS'
	UINT32  timezone_bias;  // -419
	UINT32  ip;			 // client ip
	UINT8   I_len;		  // length of account name
	UINT8   I[50];		   // account name
} Auth_logon_challenge;

void main()
{
	WSADATA wsData;
	WORD ver = MAKEWORD(2, 2);

	int wsOk = WSAStartup(ver, &wsData);

	if (wsOk != 0) {
		std::cerr << "Can't init winsock" << std::endl;
		return;
	}

	SOCKET listening = socket(AF_INET, SOCK_STREAM, 0);
	if (listening == INVALID_SOCKET) {
		std::cerr << "Can't create socket" << std::endl;
		return;
	}

	const int PORT = 3000;

	//Bind ip and port to socket
	sockaddr_in hint;
	hint.sin_family = AF_INET;
	hint.sin_port = htons(PORT);
	hint.sin_addr.S_un.S_addr = INADDR_ANY;

	bind(listening, (sockaddr*)&hint, sizeof(hint));

	std::cout << "Listening on port: " << PORT << std::endl;
	//Tell winsock to listen to the socket
	listen(listening, SOMAXCONN);

	//Client
	sockaddr_in client;
	int client_size = sizeof(client);

	SOCKET client_socket = accept(listening, (sockaddr*)&client, &client_size);
	if (client_socket == INVALID_SOCKET) {
		std::cerr << "Can't create socket" << std::endl;
		return;
	}

	char host[NI_MAXHOST]; //Remotename from client
	char service[NI_MAXHOST]; //Port the client is connected to

	ZeroMemory(host, NI_MAXHOST);
	ZeroMemory(service, NI_MAXSERV);

	if (getnameinfo((sockaddr*)&client, sizeof(client), host, NI_MAXHOST, service, NI_MAXSERV, 0) == 0) 
	{
		std::cout << host << "connected on port " << service << std::endl;
	}
	else
	{
		inet_ntop(AF_INET, &client.sin_addr, host, NI_MAXHOST);
		std::cout << host << " connected on port " << ntohs(client.sin_port) << std::endl;
	}

	closesocket(listening);

	const int size = 4096;
	char buf[size];

	while (true)
	{
		ZeroMemory(buf, size);

		int bytes_received = recv(client_socket, buf, size, 0);

		//std::cout << "bytes: " << sizeof(buf) << std::endl;
		
		if (bytes_received == SOCKET_ERROR) 
		{
			std::cerr << "Error in recive" << std::endl;
			break;
		}
		
		if (bytes_received == 0) 
		{
			std::cout << "Client disconnected" << std::endl;
			break;
		}
		
		//UINT8 cmd = *(UINT8*)buf[0];

	//	UINT16 full_size = *(UINT16*)&buf[2];
		
		Auth_logon_challenge m_challenge;
		
	//	memcpy(&m_challenge, buf, full_size + 4);

//		std::string AccountName = (char*)&m_challenge.I;
	//	std::cout << "Acount name: " + AccountName << std::endl;

		//char buffer[3];
		//buffer[0] = buffer[1] = 0;
		//buffer[2] = 0x04;
		
		char reply[size];
		logon_client client;
		client.sendToServer(buf, reply);

		//std::cout << "Command name: " << sizeof(reply) << std::endl;

		send(client_socket, reply, sizeof(reply), 0);
	}

	//Close socket
	closesocket(client_socket);

	//Cleaup winsock
	WSACleanup();
}
