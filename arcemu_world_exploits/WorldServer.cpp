#include "stdafx.h"
#include "WorldServer.h"

#pragma comment (lib, "ws2_32.lib")

SOCKET client_socket;

void WorldServer::Start()
{
	WSADATA wsData;
	WORD ver = MAKEWORD(2, 2);

	int wsOk = WSAStartup(ver, &wsData);

	if (wsOk != 0) {
		std::cerr << "Can't init winsock" << std::endl;
		return;
	}

	SOCKET listening = socket(AF_INET, SOCK_STREAM, 0);
	if (listening == INVALID_SOCKET) {
		std::cerr << "Can't create socket" << std::endl;
		return;
	}

	//Bind ip and port to socket
	sockaddr_in hint;
	hint.sin_family = AF_INET;
	hint.sin_port = htons(SERVER_PORT);
	hint.sin_addr.S_un.S_addr = INADDR_ANY;

	bind(listening, (sockaddr*)&hint, sizeof(hint));

	std::cout << "Listening on port: " << SERVER_PORT << std::endl;
	//Tell winsock to listen to the socket
	listen(listening, SOMAXCONN);

	//Client
	sockaddr_in client;
	int client_size = sizeof(client);

	client_socket = accept(listening, (sockaddr*)&client, &client_size);
	if (client_socket == INVALID_SOCKET) {
		std::cerr << "Can't create socket" << std::endl;
		return;
	}

	char host[NI_MAXHOST]; //Remotename from client
	char service[NI_MAXHOST]; //Port the client is connected to

	ZeroMemory(host, NI_MAXHOST);
	ZeroMemory(service, NI_MAXSERV);

	if (getnameinfo((sockaddr*)&client, sizeof(client), host, NI_MAXHOST, service, NI_MAXSERV, 0) == 0)
	{
		std::cout << host << "connected on port " << service << std::endl;
	}
	else
	{
		inet_ntop(AF_INET, &client.sin_addr, host, NI_MAXHOST);
		std::cout << host << " connected on port " << ntohs(client.sin_port) << std::endl;
	}

	closesocket(listening);

	//Init client connection to arcemu world server
	WorldClient worldClient;

	char buf[BUFFER_SIZE];

	while (true)
	{
		ZeroMemory(buf, BUFFER_SIZE);

		int bytes_received = recv(client_socket, buf, BUFFER_SIZE, 0);

		std::cout << "recived bytes from client: " << bytes_received << std::endl;

		if (bytes_received == SOCKET_ERROR)
		{
			std::cerr << "Error in recive" << std::endl;
			break;
		}

		if (bytes_received < 1)
		{
			std::cout << "Client disconnected" << std::endl;
			break;
		}

		else
		{

			char reply[BUFFER_SIZE];

			int bytes_out = worldClient.SendToServer(buf, reply, bytes_received);

			char* rep = new char[bytes_out];
			memcpy(rep, reply, bytes_out);

			send(client_socket, rep, bytes_out, 0);
			delete[] rep;

			std::cout << "Sending world packet back to wow client" << std::endl;
			std::cout << "Reply packet size: " << bytes_out << std::endl;

		}

	}

	//Close connection to the arcemu logon server
	worldClient.Close();

	//Close socket
	closesocket(client_socket);

	//Cleaup winsock
	WSACleanup();

	std::cout << "Logon complete, quitting" << std::endl;

	//std::this_thread::sleep_for(std::chrono::milliseconds(1000));
}

char* WorldServer::CreatePacket()
{
	return NULL;
}

typedef struct AUTH_WORLD_CHALLENGE
{
	uint8   mClientBuild;
	uint8   unk2;		  // 0x00
	uint16  account;		   // 0x0026
	uint8   unk3;	// 'WoW'
	uint8   version1;	   // 0x00
	uint8   version2;	   // 0x08 (0.8.0)
	uint8   version3;	   // 0x00
	uint8		build;		  // 3734
	uint8   platform[4];	// 'x86'
	uint8   os[4];		  // 'Win'
	uint8   country[4];	 // 'enUS'
	uint32  timezone_bias;  // -419
	uint32  ip;			 // client ip
	uint8   I_len;		  // length of account name
	uint8   I[50];		   // account name
} sAuthLogonChallenge;
