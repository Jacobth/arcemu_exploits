#include "stdafx.h"
#include "WorldClient.h"

#pragma comment (lib, "ws2_32.lib")

SOCKET sock;

WorldClient::WorldClient()
{
	StartWorldClient();
}

void WorldClient::StartWorldClient() {
	std::string ip = "127.0.0.1";		//IP of arcemu server, same for world and logon server

	WSAData data;
	WORD ver = MAKEWORD(2, 2);

	int wsResult = WSAStartup(ver, &data);

	if (wsResult != 0)
	{
		std::cerr << "can't start winsock" << std::endl;
		return;
	}

	sock = socket(AF_INET, SOCK_STREAM, 0);

	if (sock == INVALID_SOCKET)
	{
		std::cerr << "can't create socket" << std::endl;
		WSACleanup();
		return;
	}

	//Bind ip and port to socket
	sockaddr_in hint;
	hint.sin_family = AF_INET;
	hint.sin_port = htons(WORLD_PORT);
	inet_pton(AF_INET, ip.c_str(), &hint.sin_addr);

	int con_res = connect(sock, (sockaddr*)&hint, sizeof(hint));

	if (con_res == SOCKET_ERROR)
	{
		std::cerr << "can't connect to socket" << std::endl;
		closesocket(sock);
		WSACleanup();
		return;
	}
}

int WorldClient::SendToServer(char* in, char* out, int send_bytes)
{
	char buf[BUFFER_SIZE];

	int sendRes = send(sock, in, send_bytes, 0);

	if (sendRes != SOCKET_ERROR) {

		std::cout << "Sent packet to world server" << std::endl;

		ZeroMemory(buf, BUFFER_SIZE);
		int bytesReceived = recv(sock, buf, BUFFER_SIZE, 0);

		if (bytesReceived > 0) {

			std::cout << "Receiving packet from world server, size: " << bytesReceived << std::endl;

			memcpy(out, buf, bytesReceived);

			return bytesReceived;
		}
	}

	return 0;
}

void WorldClient::Close()
{
	closesocket(sock);
	WSACleanup();
}