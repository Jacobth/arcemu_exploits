#include "stdafx.h"
#include "memreader.h"
#include<iostream>
#include<Windows.h>

using namespace std;

memreader::memreader()
{

};

DWORD memreader::readInt(LPVOID pointer) {

	LPVOID value = 0;

	HWND hwnd = FindWindowA(NULL, "World of warcraft");

	if (hwnd == NULL) {

		cout << "Couldn't find the windows" << endl;
		Sleep(3000);
		exit(-1);
	}

	else {
		DWORD procID;

		GetWindowThreadProcessId(hwnd, &procID);
		HANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, procID);

		if (procID == NULL) {
			cout << "Couldn't find the process id" << endl;
			Sleep(3000);
			exit(-1);
		}

		else {

			//printf("adress: %n", pointer);
			ReadProcessMemory(handle, pointer, &value, sizeof(value), 0);

			return (INT)value;
		}
	}

}

INT memreader::writeInt(LPVOID pointer, INT value) {

	HWND hwnd = FindWindowA(NULL, "World of warcraft");

	if (hwnd == NULL) {

		cout << "Couldn't find the windows" << endl;
		Sleep(3000);
		exit(-1);
	}

	else {
		DWORD procID;

		GetWindowThreadProcessId(hwnd, &procID);
		HANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, procID);

		if (procID == NULL) {
			cout << "Couldn't find the process id" << endl;
			Sleep(3000);
			exit(-1);
		}

		else {

			WriteProcessMemory(handle, pointer, &value, sizeof(value), 0);

			return value;
		}
	}
}

DWORD memreader::readUInt32(LPVOID pointer) {

	LPVOID value = 0;

	HWND hwnd = FindWindowA(NULL, "World of warcraft");

	if (hwnd == NULL) {

		cout << "Couldn't find the windows" << endl;
		Sleep(3000);
		exit(-1);
	}

	else {
		DWORD procID;

		GetWindowThreadProcessId(hwnd, &procID);
		HANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, procID);

		if (procID == NULL) {
			cout << "Couldn't find the process id" << endl;
			Sleep(3000);
			exit(-1);
		}

		else {
		
			//printf("adress: %n", pointer);
			ReadProcessMemory(handle, pointer, &value, sizeof(value), 0);
			
			return (DWORD)value;
		}
	}

}

DWORDLONG memreader::readUInt64(LPVOID pointer) {

	LPVOID value = 0;

	HWND hwnd = FindWindowA(NULL, "World of warcraft");

	if (hwnd == NULL) {

		cout << "Couldn't find the windows" << endl;
		Sleep(3000);
		exit(-1);
	}

	else {
		DWORD procID;

		GetWindowThreadProcessId(hwnd, &procID);
		HANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, procID);

		if (procID == NULL) {
			cout << "Couldn't find the process id" << endl;
			Sleep(3000);
			exit(-1);
		}

		else {
			ReadProcessMemory(handle, pointer, &value, sizeof(value), 0);
			
			return (DWORDLONG)value;

		}
	}

}

FLOAT memreader::readFloat(LPVOID pointer) {

	FLOAT value;

	HWND hwnd = FindWindowA(NULL, "World of warcraft");

	if (hwnd == NULL) {

		cout << "Couldn't find the windows" << endl;
		Sleep(3000);
		exit(-1);
	}

	else {
		DWORD procID;

		GetWindowThreadProcessId(hwnd, &procID);
		HANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, procID);

		if (procID == NULL) {
			cout << "Couldn't find the process id" << endl;
			Sleep(3000);
			exit(-1);
		}

		else {
			ReadProcessMemory(handle, pointer, &value, sizeof(value), 0);
			
			return value;

		}
	}
}

FLOAT memreader::writeFloat(LPVOID pointer, FLOAT value) {

	HWND hwnd = FindWindowA(NULL, "World of warcraft");

	if (hwnd == NULL) {

		cout << "Couldn't find the windows" << endl;
		Sleep(3000);
		exit(-1);
	}

	else {
		DWORD procID;

		GetWindowThreadProcessId(hwnd, &procID);
		HANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, procID);

		if (procID == NULL) {
			cout << "Couldn't find the process id" << endl;
			Sleep(3000);
			exit(-1);
		}

		else {
			WriteProcessMemory(handle, pointer, &value, sizeof(value), 0);

			return value;

		}
	}
}

DWORD memreader::writeUInt32(LPVOID pointer, DWORD value) {

	HWND hwnd = FindWindowA(NULL, "World of warcraft");

	if (hwnd == NULL) {

		cout << "Couldn't find the windows" << endl;
		Sleep(3000);
		exit(-1);
	}

	else {
		DWORD procID;

		GetWindowThreadProcessId(hwnd, &procID);
		HANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, procID);

		if (procID == NULL) {
			cout << "Couldn't find the process id" << endl;
			Sleep(3000);
			exit(-1);
		}

		else {

			WriteProcessMemory(handle, pointer, &value, sizeof(value), 0);

			return value;
		}
	}
}