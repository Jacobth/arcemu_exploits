// WowExploit.cpp : Defines the entry point for the console application.
//

#include <thread>
#include "stdafx.h"
#include<iostream>
#include<Windows.h>
#include"mem_location.h"
#include <string>
#include <iomanip>
#include <limits>
#include <vector>

#include <boost/algorithm/string/classification.hpp> // Include boost::for is_any_of
#include <boost/algorithm/string/split.hpp>

#define NAME    "arcemu_expolit"
#define VERSION "v0.1"

using namespace std;

void printHelp();
void parseCommand(string str);
void printFloat(FLOAT a);

mem_location mem;

int main()
{
	std::cout << "----------------------------------------------" << std::endl;
	std::cout << NAME << " " << VERSION << std::endl;
	std::cout << "----------------------------------------------" << std::endl;

	printHelp();

	while (true) {
		string str;
		
		getline(cin, str);

		try {
			parseCommand(str);
		}
		catch (exception& e) {
			std::cout << "Error parsing command" << std::endl;
		}
		
	}

    return 0;
}

void parseCommand(string str) {

	string command = str.substr(0, str.find(' '));
	int c = stoi(command);

	switch (c)
	{

		case 0 :
		{
			printHelp();
			break;
		}

		case 1 :
		{

			vector<string> v;
			boost::split(v, str, boost::is_any_of(" "), boost::token_compress_on);

			FLOAT x = NULL;
			FLOAT y = NULL;
			FLOAT z = NULL;
			INT zoneId = NULL;

			for (int i = 1; i < v.size(); i++) {

				if (i == 1) {
					x = strtof((v[i]).c_str(), 0);
				}
				else if (i == 2) {
					y = strtof((v[i]).c_str(), 0);
				}

				else if(i == 3){
					z = strtof((v[i]).c_str(), 0);
				}

				else {
					zoneId = atoi(v[i].c_str());
				}
			}

			mem.writeZoneId(zoneId);
			mem.writePos(x, y, z);
			

			break;
		}

		case 2 :
		{
			FLOAT x = mem.readPosX();

			cout << "Player is at x position: " << "";
			printFloat(x);
			break;
		}

		case 3:
		{
			FLOAT y = mem.readPosY();

			cout << "Player is at y position: " << "";
			printFloat(y);
			break;
		}

		

		case 4:
		{
			FLOAT z = mem.readPosZ();

			cout << "Player is at z position: " << "";
			printFloat(z);
			break;
		}

		case 5:
		{
			vector<string> v;
			boost::split(v, str, boost::is_any_of(" "), boost::token_compress_on);

			FLOAT x = strtof(v[1].c_str(), 0);		

			mem.writePosX(x);

			break;
		}

		case 6:
		{
			vector<string> v;
			boost::split(v, str, boost::is_any_of(" "), boost::token_compress_on);

			FLOAT y = strtof(v[1].c_str(), 0);

			mem.writePosY(y);

			break;
		}

		case 7:
		{
			vector<string> v;
			boost::split(v, str, boost::is_any_of(" "), boost::token_compress_on);

			FLOAT z = strtof(v[1].c_str(), 0);

			mem.writePosZ(z);

			break;
		}

		case 8:
		{

			DWORD hp = mem.readHP();
			cout << "Player hp is: "<< hp;
			cout << "" << endl;
		
			break;
		}

		case 9:
		{

			mem.writeHP(50000);
			cout << "HP written to 50000" << endl;

			break;
		}

		case 10:
		{

			INT mapId = mem.readMapId();
			cout << "Player current mapId: " << mapId;
			cout << "" << endl;

			break;
		}

		case 11:
		{

			INT zoneId = mem.readZoneId();
			cout << "Player current zoneId: " << zoneId;
			cout << "" << endl;

			break;
		}
	}

}

void printHelp() {
	cout << "(0) Print help menu" << endl;
	cout << "(1) Move to a certain position, usage: x y z zoneId" << endl;
	cout << "(2) Print position x" << endl;
	cout << "(3) Print position y" << endl;
	cout << "(4) Print position z" << endl;
	cout << "(5) Move to position x, usage: x" << endl;
	cout << "(6) Move to position y, usage: y" << endl;
	cout << "(7) Move to position z, usage: z" << endl;
	cout << "(8) Get current HP" << endl;
	cout << "(9) HP exploit to be living dead(requires character to be dead)" << endl;
	cout << "(10) Read map id" << endl;
	cout << "(11) Read zone id" << endl;
}

void printFloat(FLOAT a) {

	printf("%4.2f ", a);
	cout << "" << endl;
}
