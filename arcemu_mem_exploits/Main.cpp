#include <thread>
#include "stdafx.h"
#include<iostream>
#include<Windows.h>
#include <string>
#include <iomanip>
#include <limits>
#include <vector>
#include <conio.h>

#include"MemoryLocation.h"

#include <boost/algorithm/string/classification.hpp>
#include <boost/algorithm/string/split.hpp>

#define NAME    "arcemu_expolit"
#define VERSION "v0.1"

void PrintHelp();
void ParseCommand(std::string str);
bool Key_pressed(int key);

MemoryLocation mem;

int main()
{
	std::cout << "----------------------------------------------" << std::endl;
	std::cout << NAME << " " << VERSION << std::endl;
	std::cout << "----------------------------------------------" << std::endl;

	PrintHelp();

	while (true) {
		std::string str;

		std::getline(std::cin, str);

		try {
			ParseCommand(str);
		}
		catch (std::exception& e) {
			std::cout << "Error parsing command" << std::endl;
		}

	}

	return 0;
}

void ParseCommand(std::string str)
{
	std::string command = str.substr(0, str.find(' '));
	int c = std::stoi(command);

	switch (c)
	{
		case 0:
		{
			PrintHelp();

			break;
		}

		case 1:
		{
			std::vector<std::string> v;
			boost::split(v, str, boost::is_any_of(" "), boost::token_compress_on);

			FLOAT x = NULL;
			FLOAT y = NULL;
			FLOAT z = NULL;
			INT zoneId = NULL;

			for (int i = 1; i < v.size(); i++) {

				if (i == 1) {
					x = strtof((v[i]).c_str(), 0);
				}
				else if (i == 2) {
					y = strtof((v[i]).c_str(), 0);
				}

				else if (i == 3) {
					z = strtof((v[i]).c_str(), 0);
				}

				else {
					zoneId = atoi(v[i].c_str());
				}
			}

			mem.WriteZoneId(zoneId);
			mem.WritePos(x, y, z);

			break;
		}

		case 2:
		{
			FLOAT x = mem.ReadPosX();

			std::cout << "Player is at x position: " << x << std::endl;;

			break;
		}

		case 3:
		{
			FLOAT y = mem.ReadPosY();

			std::cout << "Player is at y position: " << y << std::endl;

			break;
		}



		case 4:
		{
			FLOAT z = mem.ReadPosZ();

			std::cout << "Player is at z position: " << z << std::endl;

			break;
		}

		case 5:
		{
			std::vector<std::string> v;
			boost::split(v, str, boost::is_any_of(" "), boost::token_compress_on);

			FLOAT x = strtof(v[1].c_str(), 0);

			mem.WritePosX(x);

			break;
		}

		case 6:
		{
			std::vector<std::string> v;
			boost::split(v, str, boost::is_any_of(" "), boost::token_compress_on);

			FLOAT y = strtof(v[1].c_str(), 0);

			mem.WritePosY(y);

			break;
		}

		case 7:
		{
			std::vector<std::string> v;
			boost::split(v, str, boost::is_any_of(" "), boost::token_compress_on);

			FLOAT z = strtof(v[1].c_str(), 0);

			mem.WritePosZ(z);

			break;
		}

		case 8:
		{
			DWORD hp = mem.ReadHp();
			std::cout << "Player hp is: " << hp << std::endl;

			break;
		}

		case 9:
		{
			mem.WriteHp(50000);
			std::cout << "HP written to 50000" << std::endl;

			break;
		}

		case 10:
		{
			INT mapId = mem.ReadMapId();
			std::cout << "Player current mapId: " << mapId << std::endl;

			break;
		}

		case 11:
		{
			INT zoneId = mem.ReadZoneId();
			std::cout << "Player current zoneId: " << zoneId << std::endl;

			break;
		}

		case 12:
		{
			bool running = true;
			bool init = true;
			bool land = false;

			std::cout << "Assign key:" << std::endl;
			int key = getch();
			std::cout << "Assigned key: " << key << std::endl;

			while (running)
			{
				if (Key_pressed(key) && !init)
				{
					if (land) { mem.LandPosZ(); }

					else { mem.LiftPosZ(); }

					land = !land;

					std::cout << "Quick transport activated" << std::endl;
				}
				else if (Key_pressed(VK_ESCAPE))
				{
					std::cout << "Exit quick transport" << std::endl;
					running = false;
				}
				init = false;
			}
			break;
		}

		case 13:
		{
			std::vector<std::string> v;
			boost::split(v, str, boost::is_any_of(" "), boost::token_compress_on);

			FLOAT speed = strtof(v[1].c_str(), 0);

			mem.WriteSpeed(speed);
			break;
		}

		case 14:
		{
			DWORD speed = mem.ReadSpeed();
			std::cout << "Current speed: " << speed << std::endl;

			break;
		}

		case 15:
		{
			FLOAT swimming = mem.ReadSwimming();
			std::cout << "Player swimming: " << swimming << std::endl;

			break;
		}

		case 16:
		{
			mem.WriteFly(3);

			break;
		}

		case 17:
		{
			mem.MoveCorpseToPlayer();

			std::cout << "Moved corpse to player position" << std::endl;

			break;
		}

		case 18:
		{
			mem.MoveToCorpse();

			std::cout << "Moved player to corpse position" << std::endl;

			break;
		}
	}

}

bool Key_pressed(int key)
{
	return (GetAsyncKeyState(key) & 0x8000 != 0);
}

void PrintHelp()
{
	std::cout << "(0) Print command menu" << std::endl;
	std::cout << "(1) Move to a certain position, usage: x y z zoneId" << std::endl;
	std::cout << "(2) Print position x" << std::endl;
	std::cout << "(3) Print position y" << std::endl;
	std::cout << "(4) Print position z" << std::endl;
	std::cout << "(5) Move to position x, usage: x" << std::endl;
	std::cout << "(6) Move to position y, usage: y" << std::endl;
	std::cout << "(7) Move to position z, usage: z" << std::endl;
	std::cout << "(8) Get current HP" << std::endl;
	std::cout << "(9) HP exploit to be living dead(requires character to be dead)" << std::endl;
	std::cout << "(10) Read map id" << std::endl;
	std::cout << "(11) Read zone id" << std::endl;
	std::cout << "(12) Start quick transport, exit by pressing esc, press assigned key to land again" << std::endl;
	std::cout << "(13) Change character speed, usage: speed" << std::endl;
	std::cout << "(14) Print current speed" << std::endl;
	std::cout << "(15) Print current swimstatus" << std::endl;
	std::cout << "(16) Enable flymode on/off" << std::endl;
	std::cout << "(17) Move corpse to player position" << std::endl;
	std::cout << "(18) Move player to corpse position" << std::endl;
}

